<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>graphql</artifactId>
    <version>1.0-SNAPSHOT</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-parent</artifactId>
        <version>2.2.5.RELEASE</version>
    </parent>

    <properties>
        <java.version>1.8</java.version>
        <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
        <maven-release-plugin.version>3.0.0-M1</maven-release-plugin.version>
        <jacoco-maven-plugin.version>0.8.5</jacoco-maven-plugin.version>
        <jib-maven-plugin.version>2.4.0</jib-maven-plugin.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
        </dependency>
    </dependencies>

    <scm>
        <!--公开可在浏览器访问的 GIT 项目地址-->
        <url>https://github.com/yuezhuangshi/graphql-demo</url>
        <!--具备读权限供Maven寻找源代码-->
        <connection>scm:git:git://github.com:yuezhuangshi/graphql-demo.git</connection>
        <!--具备写权限供操作源代码-->
        <developerConnection>scm:git:git@github.com:yuezhuangshi/graphql-demo.git</developerConnection>
    </scm>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
            </plugin>
        </plugins>
    </reporting>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>${maven-release-plugin.version}</version>
                <configuration>
                    <arguments>-DskipTests</arguments>
                    <tagNameFormat>v@{project.version}</tagNameFormat>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>target/jacoco.exec</dataFile>
                            <outputDirectory>target/jacoco-reports</outputDirectory>
                            <outputEncoding>UTF-8</outputEncoding>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!--使用jib插件直接将应用打包为一个Docker镜像 mvn compile jib:dockerBuild-->
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>${jib-maven-plugin.version}</version>
                <configuration>
                    <from>
                        <!--from节点用来设置镜像的基础镜像，相当于Dockerfile中的FROM关键字-->
                        <!--jib接受三种不同的基础镜像，私有仓库中的镜像/Docker Daemon中的镜像/文件系统中的tar包-->
                        <!--https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#setting-the-base-image-->
                        <image>docker://java:8-jre</image>
                    </from>
                    <to>
                        <!--to节点用于指定镜像名称和tag-->
                        <image>graphql-demo:${jib.image.version}</image>
                    </to>
                    <!--container节点用来设置容器的属性，例如对外暴露的端口、jvm参数等-->
                    <container>
                        <jvmFlags>
                            <jvmFlag>-Xms512m</jvmFlag>
                            <jvmFlag>-Xmx2g</jvmFlag>
                            <jvmFlag>-XX:+UseParallelGC</jvmFlag>
                            <jvmFlag>-Duser.timezone=GMT+8</jvmFlag>
                            <jvmFlag>-Dfile.encoding=UTF-8</jvmFlag>
                        </jvmFlags>
                        <ports>
                            <port>8080</port>
                        </ports>
                        <!--使用该参数将镜像的创建时间与系统时间一致-->
                        <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
                        <!-- 设置时区  -->
                        <environment>
                            <TZ>Asia/Shanghai</TZ>
                        </environment>
                        <appRoot>/app</appRoot>
                        <workingDirectory>/app</workingDirectory>
                    </container>
                    <!--允许http协议的私有仓库-->
                    <allowInsecureRegistries>true</allowInsecureRegistries>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>${jib.key}</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>local</id>
            <properties>
                <profiles.active>local</profiles.active>
                <jib.key>dockerBuild</jib.key> <!-- local环境下  dockerBuild 表示将镜像打包到本地docker环境-->
                <jib.skip>true</jib.skip> <!--local环境下  跳过jib打包镜像操作 -->
                <jib.image.version>${project.version}</jib.image.version>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>dev</id>
            <properties>
                <profiles.active>dev</profiles.active>
                <jib.key>build</jib.key>
                <jib.image.version>${project.version}</jib.image.version>
            </properties>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <profiles.active>test</profiles.active>
                <jib.key>build</jib.key>
                <jib.image.version>${project.version}</jib.image.version>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <profiles.active>product</profiles.active>
                <jib.key>build</jib.key>
                <jib.image.version>${project.version}</jib.image.version>
            </properties>
        </profile>
    </profiles>

</project>
